# -*- coding: utf-8 -*-
"""20221014 파이썬 판다스 데이터시각화분석 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dpLq_oAUHTSJcWAGQx6D0bm4Rlhdlo-K

``
"""

#라이브러리 불러오기
import matplotlib

import matplotlib.pyplot as plt

import seaborn as sns

print(matplotlib.__version__)
print(sns.__version__)

"""객체지향으로 시각화 그래프 그리기


"""

#데이터 불러오기
tips=sns.load_dataset('tips')
tips.head()

# 객체 선언
fig, ax = plt.subplots(nrows = 1, ncols = 2, figsize=(15, 5))

sns.regplot(x = 'total_bill', y = 'tip', data = tips, ax = ax[0])
sns.regplot(x = 'total_bill', y = 'tip', data = tips, ax = ax[1], fit_reg=False)

#객체지향의 장점
ax[0].set_title("Graph - 1")
ax[0].set_ylabel("Give Me Tips")
ax[0].spines["top"].set_visible(False)
ax[0].spines["left"].set_visible(False)
ax[0].spines["right"].set_visible(False)

plt.show()

"""ploytly


*  matplotlib, seaborn과 유사한 클래스
*  Low-Level API, High-Level API






"""

import matplotlib.pyplot as plt
from matplotlib.ticker import (MultipleLocator, AutoMinorLocator, FuncFormatter)
import seaborn as sns
import numpy as np

def plot_example(ax, zorder=0):
    ax.bar(tips_day["day"], tips_day["tip"], color="lightgray", zorder=zorder)
    ax.set_title("tip (mean)", fontsize=16, pad=12)

    # Values
    h_pad = 0.1
    for i in range(4):
        fontweight = "normal"
        color = "k"
        if i == 3:
            fontweight = "bold"
            color = "darkred"

        ax.text(i, tips_day["tip"].loc[i] + h_pad, f"{tips_day['tip'].loc[i]:0.2f}", 
                horizontalalignment='center', fontsize=12, fontweight=fontweight, color=color)

    # Sunday
    ax.patches[3].set_facecolor("darkred")
    ax.patches[3].set_edgecolor("black")

    # set_range
    ax.set_ylim(0, 4)
    return ax

def major_formatter(x, pos):
    return "{%.2f}" % x
formatter = FuncFormatter(major_formatter)

tips_day=tips.groupby("day").mean().reset_index()
tips_day

fig, ax=plt.subplots(figsize=(10,6))
ax=plot_example(ax, zorder=2)

# print(type(ax.spines['left']))

ax.spines["top"].set_visible(False)
ax.spines["left"].set_visible(False)
ax.spines["right"].set_visible(False)

print(type(ax.yaxis))
ax.yaxis.set_major_locator(MultipleLocator(1))
ax.yaxis.set_major_formatter(formatter)
ax.yaxis.set_minor_locator(MultipleLocator(0.5))

# grid 
ax.grid(axis="y", which="major", color="lightgray")
ax.grid(axis="y", which="minor", ls=":")

