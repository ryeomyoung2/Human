print("hello world")
=>
hello world


#자바:정적타입(개발자가 타입을 명시) :String name="임여명";
#파이썬:동적타입(메모리에 할당된 값을 보고 언어가 유추하여 타입지정) :name="임여명"


name="임여명"
print(name)
=>
임여명



class1="휴먼교육센터 3클래스"
print(class1+name)
=>
휴먼교육센터 3클래스임여명



#import : 라이브러리 판다스를 가져다 쓰겠다
#as : 별칭(별칭으로 라이브러리를 지목)
import pandas as pd
#dict_date :변수 :변하는 수 <> 상수
#dict_date 변수이름을 지어서 =(대입연산자:우측 항 데이터를 좌측 항 변수에 저장)
#'a':1(a를 호출하면 1이라는 값이 출력)
#'a'문자열, 1은 정수(숫자)
dict_date = {'a':1, 'b':2, 'c':3, '임여명':'학생'}
#pd(pandas의 별칭)의 Series 메서드를 실행
#인자값 dict_date 를 넣음
sr = pd.Series(dict_date)
print(type(sr))
print('\n')
print(sr)
=>
<class 'pandas.core.series.Series'>


a       1
b       2
c       3
임여명    학생
dtype: object





#참조타입 : 변수와 변수값을 연결하는 타입<>기본타입
#sr이라는 변수이름에 원래 데이터는 dict_date이었으나, 
#list_data로 만들어진 값을 sr변수에 대체연결
list_data=['2019-01-02',2.14,'ABC',100,True]
sr=pd.Series(list_data)
print(sr)
=>
0    2019-01-02
1          2.14
2           ABC
3           100
4          True
dtype: object




#학생의 개인정보를 저장하는 딕셔너리 배열을 만들고, 
#(이름, id, pw, 성별 등등)
#그 중에 이름을 출력하는 print메서드를 실행하시오

#{}중괄호: map(key, value)
#example = {key:value, key:value..}
#[]대괄호: 배열
#example = [1,2,3,4,5..]

Student = {'이름':'임', 'ID':'Lim', 'pw':1234, '성별':'Male'}
print(list(Student.values())[1])

#향상된 반복문
#자바) for(String item: stringArray)
#기본 반복문과 동일하나, 배열 처음부터 끝까지 모두 조회를 
#간략화한 코드 : for(int i=0; i<stringArray.length; i++)
#파이썬)
#item in itemArray:
#itemArray 배열을 모두 순회하면서 하나씩 가져옴
if '이름' in Student :
    print('나의 이름은 '+Student['이름'])
else:
    print('이름 없음')
=>나의 이름은 임




sr=pd.Series(Student, index=['이름','ID','pw','성별','직업'])
print(sr)
=>
이름       임
ID     Lim
pw    1234
성별    Male
직업     NaN
dtype: object



print(sr[0])
=>
임



print(sr[0:2])
=>
이름      임
ID    Lim
dtype: object



print(sr[0:-1])
=>
이름       임
ID     Lim
pw    1234
성별    Male
dtype: object




df=pd.DataFrame([[15,'남','덕영중'],
                 [17,'여','수리중']],
               index=['준서','예은'],
               columns=['나이','성별','학교'])
print(df)
=>
    나이 성별   학교
준서  15  남  덕영중
예은  17  여  수리중




exam_data={'수학':[90,80,70],
          '영어':[98,89,95],
          '음악':[85,95,100],
          '체육':[100,90,90]}
ef=pd.DataFrame(exam_data, index=['서준','우현','인아'])
print(ef)
=>
    수학  영어   음악   체육
서준  90  98   85  100
우현  80  89   95   90
인아  70  95  100   90




ef2 = ef[:]

ef2.drop(['우현','인아'], axis=0, inplace=True)
print(ef2)
=>
    수학  영어  음악   체육
서준  90  98  85  100




exam_data={'이름':['서준','우현','인아'],
          '수학':[90,80,70],
          '영어':[98,89,95],
          '음악':[85,95,100],
           '체육':[100,90,90]}
df=pd.DataFrame(exam_data)
print(df)
=>
   이름  수학  영어   음악   체육
0  서준  90  98   85  100
1  우현  80  89   95   90
2  인아  70  95  100   90



print(len(df))
df.loc[len(df)]=['동규',90,80,70,60]
#자바는 고정, 가변 배열이 나누어진 반면에
#df[3]의 경우 고정배열로 한정된 메모리 범위 안에서 값을 추가
#df.add[3]의 경우 가변배열로 마지막 칸 이후에 추가적으로 값 추가
#파이썬의 데이터프레임은 바로 배열 번호를 작성하면 
#자유롭게 추가 가능
=>
3

   이름  수학  영어   음악   체육
0  서준  90  98   85  100
1  우현  80  89   95   90
2  인아  70  95  100   90
3  동규  90  80   70   60



df.loc['행5']=df.loc[0]
print(df)
=>
    이름  수학  영어   음악   체육
0   서준  90  98   85  100
1   우현  80  89   95   90
2   인아  70  95  100   90
3   동규  90  80   70   60
4   동규  90  80   70   60
5   동규  90  80   70   60
6   동규  90  80   70   60
7   동규  90  80   70   60
행5  서준  90  98   85  100


df.set_index('이름', inplace=True)
print(df)
=>
   수학  영어   음악   체육
이름                  
서준  90  98   85  100
우현  80  89   95   90
인아  70  95  100   90
동규  90  80   70   60
동규  90  80   70   60
동규  90  80   70   60
동규  90  80   70   60
동규  90  80   70   60
서준  90  98   85  100


df.iloc[1][3]=99

print(df)
=>
    수학  영어   음악   체육
이름                  
서준  90  98   85   100
우현  80  89   95   99
인아  70  95  100   90
동규  90  80   70   60
동규  90  80   70   60
동규  90  80   70   60
동규  90  80   70   60
동규  90  80   70   60
서준  90  98   85  100



#선형대수
#전체행렬=행,렬 바꾸기
df= df.transpose()
print(df)
#df=df.T:클래스로 전치행렬
#파이썬은 메서드를 사용하여 데이터 처리하는것이 암묵적 룰
=>
이름   서준  우현   인아  동규  동규  동규  동규  동규   서준
수학   90  80   70  90  90  90  90  90   90
영어   98  89   95  80  80  80  80  80   98
음악   85  95  100  70  70  70  70  70   85
체육  100  99   90  60  60  60  60  60  100




#데이터프레임은 2중배열로 column과 row로 구성되어있다.(=테이블)
#df.loc[위치]:튜플 추가
#drop:튜플(row)삭제
#set_index:바꾸기




#학생 회원의 정보를 담는 데이터프레임을 만들고 
#추가하는 메서드, 삭제하는 메서드, 변경하는 메서드를 만들어서 활용하는 코드를 자유롭게 만드시오

#예) 이름, 학번, 성별, 입학날짜, 기타사항..
#컬럼(데이터프레임)을 만들고 
#loc[len()], drop, set_index()를 각각 실행하는
#def 메서드 3개를 만들어 실행하는 코드 작성
#*SOLID원칙에서 하나의 메서드는 하나의 기능만 실행가능하게 만들기


#1. 함수(메서드) 개념
#함수: 재활용이 가능한 코드의 집합 = 메서드
#2. 전역변수, 지역변수
#전역변수:여러 메서드들이 사용할 수 있는 변수
#지역변수:메서드 안에서만 존재하는 변수(밖으로 나가면 소멸)
a = 10;
#메서드, 함수
def test () :
    a=20
    print(a)

#a의 값은 전역변수 a로 출력
print(a)
test()
=>
10
20





#1. 함수(메서드) 개념
#함수: 재활용이 가능한 코드의 집합 = 메서드
#2. 전역변수, 지역변수
#전역변수:여러 메서드들이 사용할 수 있는 변수
#지역변수:메서드 안에서만 존재하는 변수(밖으로 나가면 소멸)
a = 10;
#메서드, 함수
def test () :
    #변수 a는 전역변수에 a를 지칭(가져옴)
    #글로벌 선언문이 없다면, test()함수 내에서
    #지역변수 a를 만들어서 20데이터를 저장
    global a
    a=20
    print(a)
​
#a의 값은 전역변수 a로 출력
print(a)
test()
print(a)
=>
10
20
20



#학생 회원의 정보를 담는 데이터프레임을 만들고 
#추가하는 메서드, 삭제하는 메서드, 변경하는 메서드를 만들어서 활용하는 코드를 자유롭게 만드시오

exam_data={'이름':['서준','우현','인아'],
           '수학':[90,80,70],
           '영어':[98,89,95],
           '음악':[85,95,100],
           '체육':[100,90,90]}
global ef
ef=pd.DataFrame(exam_data)
print(ef)


#예) 이름, 학번, 성별, 입학날짜, 기타사항..
#컬럼(데이터프레임)을 만들고 
#loc[len()], drop, set_index()를 각각 실행하는
#def 메서드 3개를 만들어 실행하는 코드 작성
#*SOLID원칙에서 하나의 메서드는 하나의 기능만 실행가능하게 만들기


def funcInsert(name, num1, num2, num3, num4) :
    global ef
    ef.loc[len(ef)]=[name, num1, num2, num3, num4]
    #df.append(data_set, ignore_index=True)
    
def funcUpdate(name, num1, num2, num3, num4) :
    global ef  
    ef.loc[ef.이름 == name, ('수학','영어','음악','체육')]=(num1,num2,num3,num4)
    
def funcDelete(name) :
    global ef
    #df변수에 df.이름이 '준수'가 아닌 값을 가져와서 df에 할당(저장)
    ef=ef.loc[ef.이름 !='준수']
    
funcInsert('준수',10,20,30,40)
funcUpdate('준수',90,90,90,90)
# funcDelete('준수')
print(ef)
=>
   이름  수학  영어   음악   체육
0  서준  90  98   85  100
1  우현  80  89   95   90
2  인아  70  95  100   90
   이름  수학  영어   음악   체육
0  서준  90  98   85  100
1  우현  80  89   95   90
2  인아  70  95  100   90
3  준수  90  90   90   90




import seaborn as sns
import matplotlib.pyplot as plt


titanic =sns.load_dataset('titanic')
print(titanic)


sns.set_style('white')


fig=plt.figure(figsize=(15,5))
ax1=fig.add_subplot(1,2,1)
ax2=fig.add_subplot(1,2,2)
sns.regplot(x='age',
            y='fare',
            data=titanic,
            ax=ax1,
            #회귀선 (군집도가 모여있는 구간의 기울기)
            fit_reg=True)
sns.regplot(x='age',
            y='fare',
            data=titanic,
            ax=ax2,
            fit_reg=False)
plt.show()



#test set을 만드는 작업
#iloc 메서드를 사용하여 열 구분
# :초기 행부터 끝 행까지 
# :-1 처음 열부터 마지막 열 앞에 열까지
# -1 마지막 열
X = titanic.iloc[:, :-1]
y = titanic.iloc[:, -1]


#사이킷런 머신러닝 도구 : 통계분야
#train_test_split :  방대한 데이터를 split(잘라서 저장)하는 클래스
from sklearn.model_selection import train_test_split



#학습용 데이터 x값(범위)과 검증용 데이터 y값(범위)를 저장하는 변수
train_x, test_x, train_y, test_y = train_test_split(x, y, 
                                                    test_size=0.3,
                                                    random_state=1)


from sklearn.tree import DecisionTreeClassifier


dt_model=DecisionTreeClassifier(random_state=1)


from sklearn.neural_network import MLPClassifier


mlpt_model=MLPClassifier(hidden_layer_sizes=(100,200,50,20),
                         max_iter=500, random_state=1)



